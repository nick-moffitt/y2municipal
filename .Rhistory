stringr::str_c(
DATA_PATH,
'data for appendix, ',
PROJECT_NAME,
'.csv'
)
)
}
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(dataset)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference|term|gc|year_born_numeric|age_numeric|census_age_groups|lon|lat'
)
weight_quoed <- rlang::enquo(weight_var)
weight_char <- rlang::quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
dplyr::filter(
!stringr::str_detect(.data$name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(.data$name, '^s_'),
!stringr::str_detect(.data$name, '^md_'),
!stringr::str_detect(.data$name, '^m_'),
!stringr::str_detect(.data$name, '^cs_'),
!stringr::str_detect(.data$name, '^sl_'),
!stringr::str_detect(.data$name, '^n_'),
!stringr::str_detect(.data$name, '^r_'),
!stringr::str_detect(.data$name, '^oe_'),
!stringr::str_detect(.data$name, 'TEXT$'),
!stringr::str_detect(.data$name, weight_char)
) %>%
dplyr::select(.data$name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
names(municipal_data)
municipal_data %>%
select(-starts_with(m_)) %>%
topline()
# DATA_PATH <- '~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Projects/Kaysville/Data/'
# responses <- read_rds(str_c(DATA_PATH, 'Kaysville City Community Survey Weighted Geocoded Data.rds'))
# names <- taking_names()
DATA_PATH <- '~/Desktop/'
municipal_data %>%
select(-starts_with(m_)) %>%
topline()
municipal_data %>%
select(-starts_with('m_')) %>%
topline()
# create dummies
create_dummy_vars <- function(dataset) {
dataset <- dataset %>%
mutate(
s_xyz123 = NA_character_,
m_xyz123 = NA_character_,
n_xyz123 = NA_real_,
oe_xyz123 = NA_character_
)
}
municipal_data %>%
select(-starts_with('m_')) %>%
topline()
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
#' @rdname topline
#' @export
jarvis_top_us_all_off <- topline
# Private functions -------------------------------------------------------
# create dummies
create_dummy_vars <- function(dataset) {
dataset <- dataset %>%
dplyr::mutate(
s_xyz123 = NA_character_,
m_xyz123 = NA_character_,
n_xyz123 = NA_real_,
oe_xyz123 = NA_character_
)
}
# single select: run_freq_s
run_freq_s <- function(dataset, weight_var) {
freqs_s <- dataset %>%
dplyr::select(
tidyselect::starts_with('s_'),
tidyselect::starts_with('md_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
y2clerk::freqs(
prompt = TRUE,
wt = {{ weight_var }},
nas = FALSE,
unweighted_ns = TRUE
)
}
# multi select: run_freq_m
run_freq_m <- function(dataset, weight_var) {
freqs_m <- dataset %>%
dplyr::select(
tidyselect::starts_with('m_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
y2clerk::freqs(
prompt = TRUE,
wt = {{ weight_var }},
unweighted_ns = TRUE
) %>%
stats::na.omit()
}
# numeric questions: run_freq_n
run_freq_n <- function(dataset, weight_var) {
freqs_m <- dataset %>%
dplyr::select(
tidyselect::starts_with('cs_'),
tidyselect::starts_with('sl_'),
tidyselect::starts_with('n_'),
tidyselect::starts_with('r_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
dplyr::mutate_all(
~forcats::as_factor(.) %>%
as.character() %>%
as.numeric()
) %>%
y2clerk::freqs(
prompt = TRUE,
stat = 'mean',
wt = {{ weight_var }},
nas = FALSE,
unweighted_ns = TRUE
) %>%
dplyr::select(-n_xyz123)
}
# combine all freqs
run_combine_freqs <- function(
dataset,
weight_var,
PROJECT_NAME) {
freqs_s <- run_freq_s(dataset, {{weight_var}})
freqs_m <- run_freq_m(dataset, {{weight_var}})
freqs_n <- run_freq_n(dataset, {{weight_var}})
frequencies <- dplyr::bind_rows(
freqs_s,
freqs_m,
freqs_n
)
readr::write_csv(
frequencies,
stringr::str_c(
DATA_PATH,
'data for topline, ',
PROJECT_NAME,
'.csv'
)
)
}
# open ends: run_freqs_oe
run_freqs_oe <- function(dataset, PROJECT_NAME) {
freqs_oe <- dataset %>%
dplyr::select(
tidyselect::starts_with('oe_'),
tidyselect::ends_with('_TEXT')
) %>%
y2clerk::verbatims_y2()
readr::write_csv(
freqs_oe,
stringr::str_c(
DATA_PATH,
'data for appendix, ',
PROJECT_NAME,
'.csv'
)
)
}
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(dataset)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference|term|gc|year_born_numeric|age_numeric|census_age_groups|lon|lat'
)
weight_quoed <- rlang::enquo(weight_var)
weight_char <- rlang::quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
dplyr::filter(
!stringr::str_detect(.data$name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(.data$name, '^s_'),
!stringr::str_detect(.data$name, '^md_'),
!stringr::str_detect(.data$name, '^m_'),
!stringr::str_detect(.data$name, '^cs_'),
!stringr::str_detect(.data$name, '^sl_'),
!stringr::str_detect(.data$name, '^n_'),
!stringr::str_detect(.data$name, '^r_'),
!stringr::str_detect(.data$name, '^oe_'),
!stringr::str_detect(.data$name, 'TEXT$'),
!stringr::str_detect(.data$name, weight_char)
) %>%
dplyr::select(.data$name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
municipal_data %>%
select(-starts_with('m_')) %>%
topline()
# numeric questions: run_freq_n
run_freq_n <- function(dataset, weight_var) {
freqs_m <- dataset %>%
dplyr::select(
tidyselect::starts_with('cs_'),
tidyselect::starts_with('sl_'),
tidyselect::starts_with('n_'),
tidyselect::starts_with('r_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
dplyr::mutate_all(
~forcats::as_factor(.) %>%
as.character() %>%
as.numeric()
) %>%
y2clerk::freqs(
prompt = TRUE,
stat = 'mean',
wt = {{ weight_var }},
nas = FALSE,
unweighted_ns = TRUE
)
}
municipal_data %>%
select(-starts_with('m_')) %>%
topline()
# numeric questions: run_freq_n
run_freq_n <- function(dataset, weight_var) {
freqs_m <- dataset %>%
dplyr::select(
tidyselect::starts_with('cs_'),
tidyselect::starts_with('sl_'),
tidyselect::starts_with('n_'),
tidyselect::starts_with('r_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
dplyr::mutate_all(
~forcats::as_factor(.) %>%
as.character() %>%
as.numeric()
) %>%
y2clerk::freqs(
prompt = TRUE,
stat = 'mean',
wt = {{ weight_var }},
nas = FALSE,
unweighted_ns = TRUE
) %>%
dplyr::select(-n_xyz123)
}
municipal_data %>%
select(-starts_with('m_')) %>%
topline()
# numeric questions: run_freq_n
run_freq_n <- function(dataset, weight_var) {
freqs_m <- dataset %>%
dplyr::select(
tidyselect::starts_with('cs_'),
tidyselect::starts_with('sl_'),
tidyselect::starts_with('n_'),
tidyselect::starts_with('r_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
dplyr::mutate_all(
~forcats::as_factor(.) %>%
as.character() %>%
as.numeric()
) %>%
y2clerk::freqs(
prompt = TRUE,
stat = 'mean',
wt = {{ weight_var }},
nas = FALSE,
unweighted_ns = TRUE
) %>%
dplyr::filter(variable != 'n_xyz123')
}
municipal_data %>%
select(-starts_with('m_')) %>%
topline()
municipal_data %>%
select(-starts_with('s_')) %>%
select(-starts_with('md_')) %>%
topline()
municipal_data %>%
select(-starts_with('r_')) %>%
topline()
municipal_data %>%
select(-starts_with('oe_')) %>%
select(-ends_with('TEXT')) %>%
topline()
# Set up the working directory to make package
library(tidyverse)
library(devtools)
library(roxygen2)
# Process documentation
setwd('~/Documents/GitHub/y2municipal/')
document()
check()
?sprintf
methodology <- function(dataset, population) {
# LOI
loi_minutes_untrimmed <- (mean(dataset$Duration__in_seconds_) / 60) %>% round(1)
loi_minutes_trimmed <- (mean(dataset$Duration__in_seconds_, trim = 0.025) / 60)  %>% round(1)
loi_minutes_untrimmed_char <- stringr::str_c('Mean LOI: ', loi_minutes_untrimmed, ' minutes')
loi_minutes_trimmed_char <- stringr::str_c('Mean LOI trimmed: ', loi_minutes_trimmed, ' minutes')
# Field dates
field_dates_char <- get_field_dates(dataset)
# MOE
moe_char <- get_moe(dataset, population)
# Print it all
cat(
loi_minutes_untrimmed_char,
loi_minutes_trimmed_char,
field_dates_char,
moe_char,
sep = '\n'
)
}
#' @rdname methodology
#' @export
jarvis_sommelier_the_survey <- methodology
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% sprintf("%0.2f", round(result * 100, 3))
moe_char <- stringr::str_c('MOE: +/- ', moe )
}
get_field_dates <- function(dataset) {
start_month <- min(dataset$StartDate) %>% lubridate::month(label = TRUE)
start_day <- min(dataset$StartDate) %>% lubridate::day()
end_month <- min(dataset$EndDate) %>% lubridate::month(label = TRUE)
end_day <- min(dataset$EndDate) %>% lubridate::day()
field_dates_char <- stringr::str_c(
"Fielded:",
start_month,
start_day,
"-",
end_month,
end_day,
sep = ' '
)
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% sprintf("%0.2f", round(. * 100, 3))
moe_char <- stringr::str_c('MOE: +/- ', moe )
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% round(3 * 100)
moe_char <- stringr::str_c('MOE: +/- ', moe)
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% round(3 * 100) %>% sprintf("%0.2f")
moe_char <- stringr::str_c('MOE: +/- ', moe)
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% round(3 * 100) %>% as.character() %>% sprintf("%0.2f")
moe_char <- stringr::str_c('MOE: +/- ', moe)
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% as.character() %>% round(3 * 100) %>% sprintf("%0.2f")
moe_char <- stringr::str_c('MOE: +/- ', moe)
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% round(3 * 100)
moe_char <- stringr::str_c('MOE: +/- ', moe)
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% round(3)
moe_char <- stringr::str_c('MOE: +/- ', moe * 100)
}
methodology(municipal_data, 30000)
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% round(3)
moe_char <- stringr::str_c('MOE: +/- ', sprintf("%0.2f",moe * 100))
}
methodology(municipal_data, 30000)
methodology <- function(dataset, population) {
# LOI
loi_minutes_untrimmed <- (mean(dataset$Duration__in_seconds_) / 60) %>% round(1)
loi_minutes_trimmed <- (mean(dataset$Duration__in_seconds_, trim = 0.025) / 60)  %>% round(1)
loi_minutes_untrimmed_char <- stringr::str_c('Mean LOI: ', loi_minutes_untrimmed, ' minutes')
loi_minutes_trimmed_char <- stringr::str_c('Mean LOI trimmed: ', loi_minutes_trimmed, ' minutes')
# Field dates
field_dates_char <- get_field_dates(dataset)
# MOE
moe_char <- get_moe(dataset, population)
# Print it all
cat(
loi_minutes_untrimmed_char,
loi_minutes_trimmed_char,
field_dates_char,
moe_char,
sep = '\n'
)
}
#' @rdname methodology
#' @export
jarvis_sommelier_the_survey <- methodology
# Private functions -------------------------------------------------------
get_moe <- function(dataset, population) {
sample_size <- dplyr::count(dataset)
nadj <- (population - 1) * sample_size / (population - sample_size)
moe <- ((1.96 *.5) / sqrt(nadj)) %>% round(3)
moe_char <- stringr::str_c('MOE: +/- ', sprintf("%0.2f", moe * 100))
}
get_field_dates <- function(dataset) {
start_month <- min(dataset$StartDate) %>% lubridate::month(label = TRUE)
start_day <- min(dataset$StartDate) %>% lubridate::day()
end_month <- min(dataset$EndDate) %>% lubridate::month(label = TRUE)
end_day <- min(dataset$EndDate) %>% lubridate::day()
field_dates_char <- stringr::str_c(
"Fielded:",
start_month,
start_day,
"-",
end_month,
end_day,
sep = ' '
)
}
methodology(municipal_data, 30000)
install.packages(c("e1071", "fansi", "htmltools", "leafem"))
devtools::install_github('rstudio/rmarkdown')
##### 04 - Topline Freqs()
#### Toolkit ------------------------------------------------------------------
library(tidyverse)
library(y2clerk)
library(orderlabel)
library(y2municipal)
#### Data ---------------------------------------------------------------------
FILE_PATH <- "~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Projects/Salt Lake City/2021/"
DATA_PATH <- str_c(FILE_PATH, '/Data/')
responses <- read_rds(str_c(DATA_PATH,
'/Final Data.RDS'))
### Topline -------------------------------------------------------------------
# Create .csv's
topline(responses,
trimmed_weights)
names <- taking_names()
View(names)
