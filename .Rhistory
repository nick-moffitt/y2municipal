.after = .data$value
) %>%
dplyr::filter(.data$variable != 'n_xyz123')
}
# combine all freqs
run_combine_freqs <- function(
dataset,
weight_var,
PROJECT_NAME) {
freqs_s <- run_freq_s(dataset, {{weight_var}})
freqs_m <- run_freq_m(dataset, {{weight_var}})
freqs_n <- run_freq_n(dataset, {{weight_var}})
frequencies <- dplyr::bind_rows(
freqs_s,
freqs_m,
freqs_n
)
readr::write_csv(
frequencies,
stringr::str_c(
DATA_PATH,
'data for topline, ',
PROJECT_NAME,
'.csv'
)
)
}
# open ends: run_freqs_oe
run_freqs_oe <- function(dataset, PROJECT_NAME) {
freqs_oe <- dataset %>%
dplyr::select(
tidyselect::starts_with('oe_'),
tidyselect::ends_with('_TEXT')
) %>%
y2clerk::verbatims_y2()
readr::write_csv(
freqs_oe,
stringr::str_c(
DATA_PATH,
'data for appendix, ',
PROJECT_NAME,
'.csv'
)
)
}
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(dataset)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference|term|gc|year_born_numeric|age_numeric|census_age_groups|lon|lat'
)
weight_quoed <- rlang::enquo(weight_var)
weight_char <- rlang::quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
dplyr::filter(
!stringr::str_detect(.data$name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(.data$name, '^s_'),
!stringr::str_detect(.data$name, '^md_'),
!stringr::str_detect(.data$name, '^m_'),
!stringr::str_detect(.data$name, '^cs_'),
!stringr::str_detect(.data$name, '^sl_'),
!stringr::str_detect(.data$name, '^n_'),
!stringr::str_detect(.data$name, '^r_'),
!stringr::str_detect(.data$name, '^oe_'),
!stringr::str_detect(.data$name, 'TEXT$'),
!stringr::str_detect(.data$name, weight_char)
) %>%
dplyr::select(.data$name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
library(tidyverse)
library(orderlabel)
library(labelled)
#library(y2municipal)
# DATA_PATH <- '~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Projects/Kaysville/Data/'
# responses <- read_rds(str_c(DATA_PATH, 'Kaysville City Community Survey Weighted Geocoded Data.rds'))
# names <- taking_names()
responses <- read_rds('~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Active Projects_KG/SLC 2021 Budget Priorities/Data/Final Weighted Data.RDS')
names <- taking_names()
DATA_PATH <- '~/Desktop/'
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
ngadfn
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset$weights <- 1
}
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset$weights <- 1
}
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset$weights <- 1
}
}
topline <- function(
dataset,
weight_var = weights
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset$weights <- 1
}
print(weight_var)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset$weights <- 1
}
print(dataset$weights)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset <- dataset %>%
mutate(weight_var = 1)
}
print(dataset$weights)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset <- dataset %>%
mutate(weights = 1)
}
print(dataset$weights)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset <- dataset %>%
mutate(.data$weights = 1)
}
print(dataset$weights)
}
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset <- dataset %>%
dplyr::mutate(.data$weights = 1)
}
print(dataset$weights)
}
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset <- dataset %>%
dplyr::mutate(weights = 1)
}
print(dataset$weights)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
weight_var <- weights
dataset <- dataset %>%
dplyr::mutate(weights = 1)
}
print(dataset$weights)
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- weights
}
print(dataset$weights)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- weights
}
print(dataset$weights)
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
#topline(municipal_data)
responses %>% topline(NULL)
#topline(municipal_data)
responses %>% topline(1)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- weights
}
print(weight_var
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- weights
}
print(weight_var)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- dataset$weights
}
print(weight_var)
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- dataset$weights
}
print(weight_var)
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
#topline(municipal_data)
responses %>% topline(NULL)
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- as.symbol(weights)
}
print(weight_var)
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
#topline(municipal_data)
responses %>% topline(NULL)
as.symbol(weights)
as.symbol('weights')
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
if ( is.null(weight_var) ) {
dataset <- dataset %>%
dplyr::mutate(weights = 1)
weight_var <- as.symbol('weights')
}
# Make sure all vars available
dataset <- create_dummy_vars(dataset)
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
#topline(municipal_data)
responses %>% topline(NULL)
responses %>% freqs(s_taxdollar)
library(y2clerk)
responses %>% freqs(s_taxdollar)
