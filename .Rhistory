filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
#!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, sep = ' ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline: ",
leftovers_1string
)
)
}
}
names_checker(municipal_data, weight_var = weight)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
#!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, sep = ' ')
leftovers_1string <- str_c(leftover_vars, sep = ' ')
leftovers_1string <- paste(leftover_vars, collapse = ' ')
leftovers_1string <- paste(leftover_vars, collapse = '; ')
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(municipal_data)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
#!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = '; ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline: ",
leftovers_1string
)
)
}
}
names_checker(municipal_data, weight_var = weight)
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(municipal_data)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
#!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline: ",
leftovers_1string
)
)
}
}
names_checker(municipal_data, weight_var = weight)
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(municipal_data)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline: ",
leftovers_1string
)
)
}
}
names_checker(municipal_data, weight_var = weight)
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(municipal_data)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
names_checker(municipal_data, weight_var = weight)
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(municipal_data)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
#!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
names_checker(municipal_data, weight_var = weight)
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(municipal_data)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
topline <- function(
dataset,
weight_var = weights
) {
# Pre- work
weights <- NULL
PROJECT_NAME <- stringr::str_to_lower(DATA_PATH) %>%
stringr::str_remove('/data/') %>%
stringr::str_remove('/data') %>%
stringr::str_remove('.*/')
# Closed ended questions
frequencies <- run_combine_freqs(dataset, {{weight_var}}, PROJECT_NAME)
# Open ended questions
run_freqs_oe(dataset, PROJECT_NAME)
# Check missing vars
names_checker(dataset, {{weight_var}})
}
# single select: run_freq_s
run_freq_s <- function(dataset, weight_var) {
freqs_s <- dataset %>%
dplyr::select(
tidyselect::starts_with('s_'),
tidyselect::starts_with('md_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
freqs_wuw(
prompt = TRUE,
wt = {{ weight_var }},
nas = FALSE
)
}
# multi select: run_freq_m
run_freq_m <- function(dataset, weight_var) {
freqs_m <- dataset %>%
dplyr::select(
tidyselect::starts_with('m_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
freqs_wuw(
prompt = TRUE,
wt = {{ weight_var }}
) %>%
stats::na.omit()
}
# numeric questions: run_freq_n
run_freq_n <- function(dataset, weight_var) {
freqs_m <- dataset %>%
dplyr::select(
tidyselect::starts_with('cs_'),
tidyselect::starts_with('sl_'),
tidyselect::starts_with('n_'),
tidyselect::starts_with('r_'),
-tidyselect::ends_with('_TEXT'),
{{ weight_var }}
) %>%
dplyr::mutate_all(
~forcats::as_factor(.) %>%
as.character() %>%
as.numeric()
) %>%
freqs_wuw(
prompt = TRUE,
stat = 'mean',
wt = {{ weight_var }},
nas = FALSE
)
}
# combine all freqs
run_combine_freqs <- function(
dataset,
weight_var,
PROJECT_NAME) {
freqs_s <- run_freq_s(dataset, {{weight_var}})
freqs_m <- run_freq_m(dataset, {{weight_var}})
freqs_n <- run_freq_n(dataset, {{weight_var}})
frequencies <- dplyr::bind_rows(
freqs_s,
freqs_m,
freqs_n
)
readr::write_csv(
frequencies,
stringr::str_c(
DATA_PATH,
'data for topline, ',
PROJECT_NAME,
'.csv'
)
)
}
# open ends: run_freqs_oe
run_freqs_oe <- function(dataset, PROJECT_NAME) {
freqs_oe <- dataset %>%
dplyr::select(
tidyselect::starts_with('oe_'),
tidyselect::ends_with('_TEXT')
) %>%
y2clerk::verbatims_y2()
readr::write_csv(
freqs_oe,
stringr::str_c(
DATA_PATH,
'data for appendix, ',
PROJECT_NAME,
'.csv'
)
)
}
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(municipal_data)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
DATA_PATH <- '~/Dropbox (Y2 Analytics)/Y2 Analytics Team Folder/Projects/Kaysville/Data/'
responses <- read_rds(str_c(DATA_PATH, 'Kaysville City Community Survey Weighted Geocoded Data.rds'))
topline(responses, weight)
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(dataset)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
topline(responses, weight)
# Check var names
names_checker <- function(dataset, weight_var) {
ACTUAL_NAMES <- orderlabel::taking_names(dataset)
QUALTRICS_STANDARD_VARS <- c(
'StartDate|EndDate|Status|IPAddress|Progress|Duration__in_seconds_|Finished|RecordedDate|ResponseId|RecipientLastName|RecipientFirstName|RecipientEmail|ExternalReference|LocationLatitude|LocationLongitude|DistributionChannel|UserLanguage|ExternalReference|term|gc|year_born_numeric|age_numeric|census_age_groups|lon|lat'
)
weight_quoed <- enquo(weight_var)
weight_char <- quo_name(weight_quoed)
leftover_vars <- ACTUAL_NAMES %>%
filter(
!stringr::str_detect(name, QUALTRICS_STANDARD_VARS),
!stringr::str_detect(name, '^s_'),
!stringr::str_detect(name, '^md_'),
!stringr::str_detect(name, '^m_'),
!stringr::str_detect(name, '^cs_'),
!stringr::str_detect(name, '^sl_'),
!stringr::str_detect(name, '^n_'),
!stringr::str_detect(name, '^r_'),
!stringr::str_detect(name, '^oe_'),
!stringr::str_detect(name, 'TEXT$'),
!stringr::str_detect(name, weight_char)
) %>%
dplyr::select(name) %>%
purrr::as_vector()
leftovers_1string <- paste(leftover_vars, collapse = ', ')
if (length(leftover_vars) >= 1) {
warning(
stringr::str_c(
"The following variables from your dataset were not included in the topline:\n",
leftovers_1string
)
)
}
}
topline(responses, weight)
# Run a weighted frequencies with unweighted ns
frequencies <- municipal_data %>%
freqs_wuw(s_sex)
library(dplyr)
library(y2clerk)
library(orderlabel)
library(y2municipal)
# Run a weighted frequencies with unweighted ns
frequencies <- municipal_data %>%
freqs_wuw(s_sex)
# Run a topline
municipal_data %>% topline(weight_var = weights)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(dplyr)
library(y2clerk)
library(orderlabel)
library(y2municipal)
# Run a weighted frequencies with unweighted ns
frequencies <- municipal_data %>%
freqs_wuw(s_sex)
# Run a topline
municipal_data %>% topline(weight_var = weights)
?enquo
?quo_name
DATA_PATH <- '~/Desktop/'
# Checking installation
devtools::install_github('nick-moffitt/y2municipal')
install.packages(c("e1071", "psych", "sf", "stars", "tmap", "units"))
# Checking installation
#devtools::install_github('nick-moffitt/y2municipal')
#library(y2clerk)
#library(orderlabel)
library(y2municipal)
DATA_PATH <- '~/Desktop/'
topline(municipal_data)
